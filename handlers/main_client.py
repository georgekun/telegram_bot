import aiogram.utils.exceptions
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import InputMediaPhoto

import tg_analytic
from config import dp, base
from keyboards.client import change_settings_kb, main_client_kb, popular_offers_kb, get_popular_service_kb
from states.client_states import GetUserSettings


@dp.message_handler(commands="start", state="*")
async def greeting_message(message: types.Message, state: FSMContext):
    tg_analytic.statistics(message.chat.id, message.text)
    await state.finish()
    user_settings = await base.get_user_settigns(message.from_user.id)
    if user_settings is None:
        if not await base.user_exists(message.from_user.id):
            await base.add_user(message.from_user.id, message.from_user.username)
        if (await base.get_user_settigns(message.from_user.id))[0] is None:
            await GetUserSettings.get_country.set()
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.\n\n"
                                 "‚ö†–í–Ω–∏–º–∞–Ω–∏–µ. –ü–æ–ª—É—á–∏—Ç—å –∑–∞–π–º –º–æ–≥—É —Ç–æ–ª—å–∫–æ –≥—Ä–∞–∂–¥–∞–Ω–µ üá∑üá∫ –†–æ—Å—Å–∏–∏.",
                                 reply_markup=change_settings_kb)
    else:
        if (await base.get_user_settigns(message.from_user.id))[0] is None:
            await GetUserSettings.get_country.set()
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.\n\n"
                                 "‚ö†–í–Ω–∏–º–∞–Ω–∏–µ. –ü–æ–ª—É—á–∏—Ç—å –∑–∞–π–º –º–æ–≥—É —Ç–æ–ª—å–∫–æ –≥—Ä–∞–∂–¥–∞–Ω–µ üá∑üá∫ –†–æ—Å—Å–∏–∏.",
                                 reply_markup=change_settings_kb)
        else:
            await message.answer(f"<b>–°—Ç—Ä–∞–Ω–∞:</b> {user_settings[0]}\n"
                                 f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {user_settings[1]}\n",
                                 reply_markup=main_client_kb)


@dp.callback_query_handler(Text(startswith="settings_"), state=GetUserSettings.get_country)
async def get_country(call: types.CallbackQuery, state: FSMContext):
    country = call.data.split("_")[1]
    async with state.proxy() as data:
        data['country'] = country
    await GetUserSettings.next()
    await call.message.answer(f"<strong>{call.from_user.username}</strong>, "
                              f"–Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º (–ü—Ä–∏–º–µ—Ä ‚Äî 21)")
    await call.message.delete()


@dp.message_handler(state=GetUserSettings.get_age)
async def get_age(message: types.Message, state: FSMContext):
    try:
        age = int(message.text)
        if 17 < age < 86:
            async with state.proxy() as data:
                data['age'] = age
                await base.update_user_settings(message.from_user.id, data['country'], data['age'])
                await message.answer(f"<b>–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ</b>\n"
                                     f"<b>–°—Ç—Ä–∞–Ω–∞:</b> {data['country']}\n"
                                     f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {data['age']}\n",
                                     reply_markup=main_client_kb)
            await state.finish()
        else:
            await message.answer("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–π–º–∞ –≤–∞–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 18 –∏ –Ω–µ –±–æ–ª–µ–µ 85 –ª–µ—Ç")
    except ValueError:
        await message.answer("<b>–í—ã –≤–≤–µ–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n"
                             "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.</b>")


@dp.message_handler(Text("‚≠ê–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"))
async def get_popular_offers(message: types.Message):
    tg_analytic.statistics(message.chat.id, message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", reply_markup=popular_offers_kb)


@dp.callback_query_handler(Text(startswith="popular_"))
async def get_popular_by_param(call: types.CallbackQuery):
    try:
        param = call.data.split("_")[1]
        country = await base.get_user_country(call.from_user.id)
        print((await base.get_popular_services_by_param(param, country))[0])
        start_service_info = (await base.get_popular_services_by_param(param, country))[0]
        await call.message.delete()
        if country == "–†–æ—Å—Å–∏—è":
            valute = "—Ä—É–±."
        elif country == "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω":
            valute = "—Ç–µ–Ω–≥–µ"
        elif country == "–£–∫—Ä–∞–∏–Ω–∞":
            valute = "–≥—Ä."
        free_procent_if = "" if start_service_info[7] is None else start_service_info[7]
        msg = (f"<b>–ó–∞–π–º:</b> –æ—Ç {start_service_info[2]} –¥–æ {start_service_info[3]} {valute}\n"
               f"<b>–°—Ä–æ–∫:</b>  –æ—Ç {start_service_info[4]} –¥–æ {start_service_info[5]} –¥–Ω–µ–π\n"
               f"<b>–ü—Ä–æ—Ü–µ–Ω—Ç:</b> {start_service_info[6]}%\n")
        if bool(len(free_procent_if)):
            msg += (f"\n<b>–£—Å–ª–æ–≤–∏—è –∑–∞–π–º–∞ –ø–æ–¥ 0%</b>\n"
                    f"{free_procent_if}")
        await call.message.answer_photo(photo=start_service_info[8],
                                        caption=msg,
                                        reply_markup=await get_popular_service_kb(start_service_info[-1], param,
                                                                                  country))
    except IndexError:
        await call.message.delete()
        await call.message.answer("–ü–æ–∫–∞ —á—Ç–æ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∑–∞–π–º–æ–≤!")


@dp.callback_query_handler(Text(startswith="getservice_"))
async def get_service_info(call: types.CallbackQuery):
    param = call.data.split("_")[1]
    callback = call.data.split("_")[2]
    country = await base.get_user_country(call.from_user.id)
    ind = await base.get_index_by_callback(callback, param, country)
    service_info = (await base.get_popular_services_by_param(param, country))[ind]
    if country == "–†–æ—Å—Å–∏—è":
        valute = "—Ä—É–±."
 
    free_procent_if = "" if service_info[7] is None else service_info[7]
    msg = (f"<b>–ó–∞–π–º:</b> –æ—Ç {service_info[2]} –¥–æ {service_info[3]} {valute}\n"
           f"<b>–°—Ä–æ–∫:</b>  –æ—Ç {service_info[4]} –¥–æ {service_info[5]} –¥–Ω–µ–π\n"
           f"<b>–ü—Ä–æ—Ü–µ–Ω—Ç:</b> {service_info[6]}%\n")
    if bool(len(free_procent_if)):
        msg += (f"\n<b>–£—Å–ª–æ–≤–∏—è –∑–∞–π–º–∞ –ø–æ–¥ 0%</b>\n"
                f"{free_procent_if}")
    try:
        await call.message.edit_media(InputMediaPhoto(media=service_info[8], caption=msg),
                                      reply_markup=await get_popular_service_kb(service_info[-1], param, country))
    except aiogram.utils.exceptions.MessageNotModified:
        await call.answer()
