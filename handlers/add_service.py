from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from config import dp, base, admins
from keyboards.admin import get_services_kb, choose_kb, edit_countires_kb, cancel_kb, get_service_edit_kb
from states.admin_states import AddService


@dp.message_handler(Text("üìÑ–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤"), user_id=admins)
async def services_menu(message: types.Message):
    await message.answer("‚öô–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=edit_countires_kb)

@dp.callback_query_handler(Text("country_menu"))
async def call_services_menu(call: types.CallbackQuery):
    await call.message.edit_text("‚öô–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=edit_countires_kb)

@dp.callback_query_handler(Text(startswith="editservices_"))
async def edit_service(call: types.CallbackQuery):
    country = call.data.split("_")[1]
    await call.message.edit_text("üìÑ–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:", reply_markup=await get_services_kb(country))

@dp.callback_query_handler(Text(startswith="add_new_service_"))
async def add_new_service(call: types.CallbackQuery, state: FSMContext):
    await AddService.get_link.set()
    country = call.data.split("_")[3]
    async with state.proxy() as data:
        data['country'] = country
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É:", reply_markup=cancel_kb)
    await call.message.delete()

@dp.message_handler(state=AddService.get_link)
async def get_service_link(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['link'] = message.text
    await AddService.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–π–º–∞:", reply_markup=cancel_kb)

@dp.message_handler(state=AddService.get_bottom_sum)
async def get_service_link(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['bottom_sum'] = int(message.text)
        await AddService.next()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–π–º–∞:", reply_markup=cancel_kb)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ")

@dp.message_handler(state=AddService.get_upper_sum)
async def get_service_link(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['upper_sum'] = int(message.text)
        await AddService.next()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É —Å—Ä–æ–∫–∞ –∑–∞–π–º–∞:", reply_markup=cancel_kb)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ")

@dp.message_handler(state=AddService.get_bottom_term)
async def get_service_link(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['bottom_term'] = int(message.text)
        await AddService.next()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É —Å—Ä–æ–∫–∞ –∑–∞–π–º–∞:", reply_markup=cancel_kb)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ")

@dp.message_handler(state=AddService.get_upper_term)
async def get_service_link(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['upper_term'] = int(message.text)
        await AddService.next()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–π–º–∞:", reply_markup=cancel_kb)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ")

@dp.message_handler(state=AddService.get_procent)
async def get_service_link(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['procent'] = int(message.text)
        await AddService.get_service_have_free_procent_if.set()
        await message.answer("–ï—Å—Ç—å –ª–∏ —É—Å–ª–æ–≤–∏–µ –∑–∞–π–º–∞ –ø–æ–¥ 0% ?", reply_markup=choose_kb)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ")

@dp.message_handler(state=AddService.get_service_have_free_procent_if)
async def get_is_badki(message: types.Message, state: FSMContext):
    ans = message.text
    if ans in ["‚úÖ–î–∞", "‚ùå–ù–µ—Ç"]:
        if ans == "‚úÖ–î–∞":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –∑–∞–π–º–∞ –ø–æ–¥ 0%:")
            await AddService.get_free_procent_if.set()
        else:
            async with state.proxy() as data:
                data['free_procent_if'] = None
            await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", reply_markup=cancel_kb)
            await AddService.get_picture.set()
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç!\n\n –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–∫–æ–∫ –Ω–∏–∂–µ", reply_markup=choose_kb)

@dp.message_handler(state=AddService.get_free_procent_if)
async def get_service_link(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['free_procent_if'] = message.text
    await AddService.get_picture.set()
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", reply_markup=cancel_kb)

@dp.message_handler(state=AddService.get_picture, content_types=['photo'])
async def get_picture(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['picture'] = message.photo[0].file_id
    await AddService.next()
    await message.answer("–ó–∞–π–º —Å –ø–ª–æ—Ö–æ–π –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π?", reply_markup=choose_kb)

@dp.message_handler(state=AddService.get_is_badki)
async def get_is_badki(message: types.Message, state: FSMContext):
    ans = message.text
    if ans in ["‚úÖ–î–∞", "‚ùå–ù–µ—Ç"]:
        async with state.proxy() as data:
            data['is_badki'] = 1 if ans == "‚úÖ–î–∞" else 0
        await AddService.next()
        await message.answer("–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞? (–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–π–º–∞)", reply_markup=choose_kb)
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç!\n\n –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–∫–æ–∫ –Ω–∏–∂–µ", reply_markup=choose_kb)

@dp.message_handler(state=AddService.get_is_card)
async def get_is_badki(message: types.Message, state: FSMContext):
    ans = message.text
    if ans in ["‚úÖ–î–∞", "‚ùå–ù–µ—Ç"]:
        async with state.proxy() as data:
            data['is_card'] = 1 if ans == "‚úÖ–î–∞" else 0
        await AddService.next()
        await message.answer("–Ø–Ω–¥–µ–∫—Å –¥–µ–Ω—å–≥–∏? (–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–π–º–∞)", reply_markup=choose_kb)
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç!\n\n –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–∫–æ–∫ –Ω–∏–∂–µ", reply_markup=choose_kb)

@dp.message_handler(state=AddService.get_is_yandex)
async def get_is_badki(message: types.Message, state: FSMContext):
    ans = message.text
    if ans in ["‚úÖ–î–∞", "‚ùå–ù–µ—Ç"]:
        async with state.proxy() as data:
            data['is_yandex'] = 1 if ans == "‚úÖ–î–∞" else 0
        await AddService.next()
        await message.answer("QIWI? (–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–π–º–∞)", reply_markup=choose_kb)
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç!\n\n –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–∫–æ–∫ –Ω–∏–∂–µ", reply_markup=choose_kb)

@dp.message_handler(state=AddService.get_is_qiwi)
async def get_is_badki(message: types.Message, state: FSMContext):
    ans = message.text
    if ans in ["‚úÖ–î–∞", "‚ùå–ù–µ—Ç"]:
        async with state.proxy() as data:
            data['is_qiwi'] = 1 if ans == "‚úÖ–î–∞" else 0
        await AddService.next()
        await message.answer("–ß–µ—Ä–µ–∑ –°–∏—Å—Ç–µ–º—É –ö–æ–Ω—Ç–∞–∫—Ç? (–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–π–º–∞)", reply_markup=choose_kb)
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç!\n\n –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–∫–æ–∫ –Ω–∏–∂–µ", reply_markup=choose_kb)

@dp.message_handler(state=AddService.get_is_contact)
async def get_is_contact(message: types.Message, state: FSMContext):
    ans = message.text
    if ans in ["‚úÖ–î–∞", "‚ùå–ù–µ—Ç"]:
        async with state.proxy() as data:
            data['is_contact'] = 1 if ans == "‚úÖ–î–∞" else 0
            await base.add_service(data['link'], data['country'], data['bottom_sum'], data['upper_sum'], data['bottom_term'], data['upper_term'],
                                   data['procent'], data['picture'], data['is_badki'], data['is_card'], data['is_yandex'], data['is_qiwi'], data['is_contact'], data['free_procent_if'])
            await message.answer("<b>‚úÖ–°–µ—Ä–≤–∏—Å –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\nüìÑ–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å", reply_markup=await get_services_kb(data['country']))
        await state.finish()
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç!\n\n –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–∫–æ–∫ –Ω–∏–∂–µ", reply_markup=choose_kb)

@dp.callback_query_handler(Text(startswith="editservice_"), user_id=admins)
async def edit_service(call: types.CallbackQuery):
    service = call.data.split("_")[1]
    service_info = await base.get_service_info(service)
    country = service_info[1]
    if country == "–†–æ—Å—Å–∏—è":
        valute = "—Ä—É–±."
    elif country == "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω":
        valute = "—Ç–µ–Ω–≥–µ"
    elif country == "–£–∫—Ä–∞–∏–Ω–∞":
        valute = "–≥—Ä."
    free_procent_if = "–ù–µ—Ç" if service_info[7] is None else service_info[7]
    is_badki = "–ù–µ—Ç" if bool(service_info[9]) else "–î–∞"
    is_card = "–ù–µ—Ç" if bool(service_info[10]) else "–î–∞"
    is_yandex = "–ù–µ—Ç" if bool(service_info[11]) else "–î–∞"
    is_qiwi = "–ù–µ—Ç" if bool(service_info[12]) else "–î–∞"
    is_contact = "–ù–µ—Ç" if bool(service_info[13]) else "–î–∞"
    msg = "<b>üàØ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ</b>\n\n"
    msg += (f"<b>–°—Å—ã–ª–∫–∞</b>: {service_info[0]}\n"
            f"<b>–°—É–º–º–∞</b>: –æ—Ç {service_info[2]} {valute} –¥–æ {service_info[3]} {valute}\n"
            f"<b>–°—Ä–æ–∫</b>: –æ—Ç {service_info[4]} –¥–æ {service_info[5]} –¥–Ω–µ–π\n"
            f"<b>–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–π–º–∞</b>: {service_info[6]}%\n"
            f"<b>–£—Å–ª–æ–≤–∏–µ –∑–∞–π–º–∞ –ø–æ–¥ 0%</b>: {free_procent_if}\n"
            f"<b>–° –ø–ª–æ—Ö–æ–π –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π</b>: {is_badki}\n"
            f"<b>–ö–∞—Ä—Ç–∞</b>: {is_card}\n"
            f"<b>–Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏</b>: {is_yandex}\n"
            f"<b>QIWI</b>: {is_qiwi}\n"
            f"<b>–°–∏—Å—Ç–µ–º–∞ –ö–æ–Ω—Ç–∞–∫—Ç</b>: {is_contact}\n")
    await call.message.answer_photo(photo=service_info[8], caption=msg, reply_markup=await get_service_edit_kb(service))
    await call.message.delete()

@dp.callback_query_handler(Text(startswith="deleteservice_"))
async def delete_service(call: types.CallbackQuery):
    country = await base.get_country_by_link(call.data.split("_")[1])
    await base.delete_service(call.data.split("_")[1])
    await call.message.answer("<b>‚úÖ–°–µ—Ä–≤–∏—Å —É–¥–∞–ª—ë–Ω</b>\n\nüìÑ–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:", reply_markup=await get_services_kb(country))
    await call.message.delete()

@dp.callback_query_handler(Text(startswith="country_back_"))
async def get_back_to_country_menu(call: types.CallbackQuery):
    country = await base.get_country_by_link(call.data.split("_")[2])
    await call.message.answer("üìÑ–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:", reply_markup=await get_services_kb(country))
    await call.message.delete()




